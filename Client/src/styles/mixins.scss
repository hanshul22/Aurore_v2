@use './variables' as *;

// Layout container with max-width and horizontal padding
@mixin container($max-width: $breakpoint-xl, $padding-x: 20px) {
    max-width: $max-width;
    margin-left: auto;
    margin-right: auto;
    padding-left: $padding-x;
    padding-right: $padding-x;
    width: 100%;
}

// Center content using flexbox
@mixin flex-center($direction: row) {
    display: flex;
    flex-direction: $direction;
    align-items: center;
    justify-content: center;
}

// Media query helper
@mixin respond-to($breakpoint) {
    @media (max-width: $breakpoint) {
        @content;
    }
}

// ============================================
// SCSS Mixins - Reusable Style Patterns
// ============================================

// Responsive Breakpoints Mixin
@mixin respond-to($breakpoint) {
    @if $breakpoint =='xs' {
        @media (min-width: $breakpoint-xs) {
            @content;
        }
    }

    @else if $breakpoint =='sm' {
        @media (min-width: $breakpoint-sm) {
            @content;
        }
    }

    @else if $breakpoint =='md' {
        @media (min-width: $breakpoint-md) {
            @content;
        }
    }

    @else if $breakpoint =='lg' {
        @media (min-width: $breakpoint-lg) {
            @content;
        }
    }

    @else if $breakpoint =='xl' {
        @media (min-width: $breakpoint-xl) {
            @content;
        }
    }

    @else if $breakpoint =='xxl' {
        @media (min-width: $breakpoint-xxl) {
            @content;
        }
    }
}

// Flexbox Center Mixin
@mixin flex-center {
    display: flex;
    justify-content: center;
    align-items: center;
}

// Flexbox Between Mixin
@mixin flex-between {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

// Truncate Text Mixin (Single Line)
@mixin truncate-text {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

// Multi-line Truncate Mixin
@mixin line-clamp($lines) {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
}

// Box Shadow Mixin
@mixin box-shadow($shadow) {
    -webkit-box-shadow: $shadow;
    -moz-box-shadow: $shadow;
    box-shadow: $shadow;
}

// Transition Mixin
@mixin transition($properties...) {
    transition: $properties;
}

// Absolute Center Mixin
@mixin absolute-center {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

// Container Mixin
@mixin container($max-width: $breakpoint-xl) {
    width: 100%;
    max-width: $max-width;
    margin-left: auto;
    margin-right: auto;
    padding-left: $spacing-4;
    padding-right: $spacing-4;
}

// Button Reset Mixin
@mixin button-reset {
    background: none;
    border: none;
    padding: 0;
    margin: 0;
    font: inherit;
    cursor: pointer;
    outline: inherit;
}

// List Reset Mixin
@mixin list-reset {
    list-style: none;
    padding: 0;
    margin: 0;
}

// Link Reset Mixin
@mixin link-reset {
    text-decoration: none;
    color: inherit;
}

// Clearfix Mixin
@mixin clearfix {
    &::after {
        content: '';
        display: table;
        clear: both;
    }
}

// Aspect Ratio Mixin
@mixin aspect-ratio($width, $height) {
    position: relative;

    &::before {
        content: '';
        display: block;
        padding-top: ($height / $width) * 100%;
    }

    >* {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
    }
}

// Visually Hidden (Accessible)
@mixin visually-hidden {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
}

// Hover Effect Mixin
@mixin hover-effect($scale: 1.05, $shadow: $shadow-md) {
    transition: transform $transition-base, box-shadow $transition-base;

    &:hover {
        transform: scale($scale);
        box-shadow: $shadow;
    }
}